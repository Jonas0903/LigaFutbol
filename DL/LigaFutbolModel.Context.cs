//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LigaFutbolEntities : DbContext
    {
        public LigaFutbolEntities()
            : base("name=LigaFutbolEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Equipo> Equipoes { get; set; }
        public virtual DbSet<EquipoPartido> EquipoPartidoes { get; set; }
        public virtual DbSet<Fuerza> Fuerzas { get; set; }
        public virtual DbSet<Jugador> Jugadors { get; set; }
        public virtual DbSet<JugadorPartido> JugadorPartidoes { get; set; }
        public virtual DbSet<Partido> Partidoes { get; set; }
    
        public virtual int EquipoAdd(string nombre, Nullable<int> idFuerza)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idFuerzaParameter = idFuerza.HasValue ?
                new ObjectParameter("IdFuerza", idFuerza) :
                new ObjectParameter("IdFuerza", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoAdd", nombreParameter, idFuerzaParameter);
        }
    
        public virtual ObjectResult<EquipoGetByFuerza_Result> EquipoGetByFuerza(Nullable<int> idFuerza)
        {
            var idFuerzaParameter = idFuerza.HasValue ?
                new ObjectParameter("IdFuerza", idFuerza) :
                new ObjectParameter("IdFuerza", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipoGetByFuerza_Result>("EquipoGetByFuerza", idFuerzaParameter);
        }
    
        public virtual ObjectResult<FuerzaGetAll_Result> FuerzaGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FuerzaGetAll_Result>("FuerzaGetAll");
        }
    
        public virtual int JugadorAdd(Nullable<int> idEquipo, string nombre, string apellido)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JugadorAdd", idEquipoParameter, nombreParameter, apellidoParameter);
        }
    
        public virtual int JugadorUpdate(Nullable<int> idJugador, string nombre, string apellido, Nullable<int> goles, Nullable<int> idEquipo, Nullable<int> opcion)
        {
            var idJugadorParameter = idJugador.HasValue ?
                new ObjectParameter("IdJugador", idJugador) :
                new ObjectParameter("IdJugador", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var golesParameter = goles.HasValue ?
                new ObjectParameter("Goles", goles) :
                new ObjectParameter("Goles", typeof(int));
    
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JugadorUpdate", idJugadorParameter, nombreParameter, apellidoParameter, golesParameter, idEquipoParameter, opcionParameter);
        }
    
        public virtual ObjectResult<EquipoGetById_Result> EquipoGetById(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipoGetById_Result>("EquipoGetById", idEquipoParameter);
        }
    
        public virtual ObjectResult<JugadorGetByEquipo_Result> JugadorGetByEquipo(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JugadorGetByEquipo_Result>("JugadorGetByEquipo", idEquipoParameter);
        }
    
        public virtual ObjectResult<JugadorGetById_Result> JugadorGetById(Nullable<int> idJugador)
        {
            var idJugadorParameter = idJugador.HasValue ?
                new ObjectParameter("IdJugador", idJugador) :
                new ObjectParameter("IdJugador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JugadorGetById_Result>("JugadorGetById", idJugadorParameter);
        }
    
        public virtual ObjectResult<FuerzaGetById_Result> FuerzaGetById(Nullable<int> idFuerza)
        {
            var idFuerzaParameter = idFuerza.HasValue ?
                new ObjectParameter("IdFuerza", idFuerza) :
                new ObjectParameter("IdFuerza", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FuerzaGetById_Result>("FuerzaGetById", idFuerzaParameter);
        }
    
        public virtual ObjectResult<EquipoGetAll_Result> EquipoGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipoGetAll_Result>("EquipoGetAll");
        }
    
        public virtual int EquipoUpdate(Nullable<int> idEquipo, string nombre, Nullable<int> puntos, Nullable<int> golesFavor, Nullable<int> golesContra, Nullable<int> idFuerza, Nullable<int> diferenciaGoles, Nullable<int> opcion)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var puntosParameter = puntos.HasValue ?
                new ObjectParameter("Puntos", puntos) :
                new ObjectParameter("Puntos", typeof(int));
    
            var golesFavorParameter = golesFavor.HasValue ?
                new ObjectParameter("GolesFavor", golesFavor) :
                new ObjectParameter("GolesFavor", typeof(int));
    
            var golesContraParameter = golesContra.HasValue ?
                new ObjectParameter("GolesContra", golesContra) :
                new ObjectParameter("GolesContra", typeof(int));
    
            var idFuerzaParameter = idFuerza.HasValue ?
                new ObjectParameter("IdFuerza", idFuerza) :
                new ObjectParameter("IdFuerza", typeof(int));
    
            var diferenciaGolesParameter = diferenciaGoles.HasValue ?
                new ObjectParameter("DiferenciaGoles", diferenciaGoles) :
                new ObjectParameter("DiferenciaGoles", typeof(int));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoUpdate", idEquipoParameter, nombreParameter, puntosParameter, golesFavorParameter, golesContraParameter, idFuerzaParameter, diferenciaGolesParameter, opcionParameter);
        }
    }
}
